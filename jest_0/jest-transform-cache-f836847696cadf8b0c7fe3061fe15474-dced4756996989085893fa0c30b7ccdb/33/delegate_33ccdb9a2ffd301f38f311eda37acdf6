5de2cf7c4a4558671fe080a992d20858
'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _stringify = require('babel-runtime/core-js/json/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _toConsumableArray2 = require('babel-runtime/helpers/toConsumableArray');

var _toConsumableArray3 = _interopRequireDefault(_toConsumableArray2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _node = require('@/services/node');

var _node2 = _interopRequireDefault(_node);

var _block = require('@/services/block');

var _block2 = _interopRequireDefault(_block);

var _forging = require('@/services/forging');

var _forging2 = _interopRequireDefault(_forging);

var _store = require('@/store');

var _store2 = _interopRequireDefault(_store);

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DelegateService = function () {
  function DelegateService() {
    (0, _classCallCheck3.default)(this, DelegateService);
  }

  (0, _createClass3.default)(DelegateService, [{
    key: 'all',
    value: function () {
      var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee() {
        var activeDelegates, response, requests, index, results;
        return _regenerator2.default.wrap(function _callee$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                activeDelegates = _store2.default.getters['network/activeDelegates'];
                _context.next = 3;
                return _node2.default.get('delegates', {
                  params: {
                    limit: activeDelegates
                  }
                });

              case 3:
                response = _context.sent;
                requests = [];

                requests.push(response);

                for (index = 1; index < Math.ceil(response.data.totalCount / activeDelegates); index++) {
                  requests.push(_node2.default.get('delegates', {
                    params: {
                      limit: activeDelegates,
                      offset: index * activeDelegates
                    }
                  }));
                }

                _context.next = 9;
                return _promise2.default.all(requests);

              case 9:
                results = _context.sent;
                return _context.abrupt('return', results.map(function (result) {
                  return result.data.delegates;
                }).reduce(function (a, b) {
                  return [].concat((0, _toConsumableArray3.default)(a), (0, _toConsumableArray3.default)(b));
                }));

              case 11:
              case 'end':
                return _context.stop();
            }
          }
        }, _callee, this);
      }));

      function all() {
        return _ref.apply(this, arguments);
      }

      return all;
    }()
  }, {
    key: 'voters',
    value: function () {
      var _ref2 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee2(publicKey) {
        var excludeLowBalances = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
        var response, voters;
        return _regenerator2.default.wrap(function _callee2$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return _node2.default.get('delegates/voters', {
                  params: { publicKey: publicKey }
                });

              case 2:
                response = _context2.sent;
                voters = _lodash2.default.orderBy(response.data.accounts.map(function (account) {
                  account.balance = Number(account.balance);

                  return account;
                }), 'balance', 'desc');


                if (excludeLowBalances) {
                  voters = _lodash2.default.filter(voters, function (account) {
                    return account.balance > 0.1 * Math.pow(10, 8);
                  });
                }

                return _context2.abrupt('return', voters);

              case 6:
              case 'end':
                return _context2.stop();
            }
          }
        }, _callee2, this);
      }));

      function voters(_x) {
        return _ref2.apply(this, arguments);
      }

      return voters;
    }()
  }, {
    key: 'findByUsername',
    value: function () {
      var _ref3 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee3(username) {
        var response;
        return _regenerator2.default.wrap(function _callee3$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                _context3.next = 2;
                return _node2.default.get('delegates/get', {
                  params: { username: username }
                });

              case 2:
                response = _context3.sent;
                return _context3.abrupt('return', response.data.delegate);

              case 4:
              case 'end':
                return _context3.stop();
            }
          }
        }, _callee3, this);
      }));

      function findByUsername(_x3) {
        return _ref3.apply(this, arguments);
      }

      return findByUsername;
    }()
  }, {
    key: 'find',
    value: function () {
      var _ref4 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee4(publicKey) {
        var response, delegate, forgeResponse;
        return _regenerator2.default.wrap(function _callee4$(_context4) {
          while (1) {
            switch (_context4.prev = _context4.next) {
              case 0:
                _context4.next = 2;
                return _node2.default.get('delegates/get', {
                  params: { publicKey: publicKey }
                });

              case 2:
                response = _context4.sent;
                delegate = response.data.delegate;

                if (delegate) {
                  _context4.next = 6;
                  break;
                }

                return _context4.abrupt('return', false);

              case 6:
                _context4.next = 8;
                return _node2.default.get('delegates/forging/getForgedByAccount?generatorPublicKey=' + delegate.publicKey);

              case 8:
                forgeResponse = _context4.sent;


                delegate.forged = Number(forgeResponse.data.forged);

                return _context4.abrupt('return', delegate);

              case 11:
              case 'end':
                return _context4.stop();
            }
          }
        }, _callee4, this);
      }));

      function find(_x4) {
        return _ref4.apply(this, arguments);
      }

      return find;
    }()
  }, {
    key: 'standby',
    value: function () {
      var _ref5 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee5() {
        var activeDelegates, response;
        return _regenerator2.default.wrap(function _callee5$(_context5) {
          while (1) {
            switch (_context5.prev = _context5.next) {
              case 0:
                activeDelegates = _store2.default.getters['network/activeDelegates'];
                _context5.next = 3;
                return _node2.default.get('delegates', { params: { offset: activeDelegates } });

              case 3:
                response = _context5.sent;
                return _context5.abrupt('return', response.data.delegates);

              case 5:
              case 'end':
                return _context5.stop();
            }
          }
        }, _callee5, this);
      }));

      function standby() {
        return _ref5.apply(this, arguments);
      }

      return standby;
    }()
  }, {
    key: 'nextForgers',
    value: function () {
      var _ref6 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee6() {
        var activeDelegates, response;
        return _regenerator2.default.wrap(function _callee6$(_context6) {
          while (1) {
            switch (_context6.prev = _context6.next) {
              case 0:
                activeDelegates = _store2.default.getters['network/activeDelegates'];
                _context6.next = 3;
                return _node2.default.get('delegates/getNextForgers', {
                  params: { limit: activeDelegates }
                });

              case 3:
                response = _context6.sent;
                return _context6.abrupt('return', response.data.delegates);

              case 5:
              case 'end':
                return _context6.stop();
            }
          }
        }, _callee6, this);
      }));

      function nextForgers() {
        return _ref6.apply(this, arguments);
      }

      return nextForgers;
    }()

    /**
     * @TODO - Remove this when Core 2.0 is released.
     */

  }, {
    key: 'activeDelegates',
    value: function () {
      var _ref7 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee7() {
        var activeDelegates, response, delegateCount, blocks, lastBlocksFetched, delegates, requests, lastDelegatesLastBlock, results, delegatesLastBlock, nextForgers, delegatesRounds, height;
        return _regenerator2.default.wrap(function _callee7$(_context7) {
          while (1) {
            switch (_context7.prev = _context7.next) {
              case 0:
                activeDelegates = _store2.default.getters['network/activeDelegates'];
                _context7.next = 3;
                return _node2.default.get('delegates', {
                  params: {
                    orderBy: 'rate:asc',
                    limit: activeDelegates
                  }
                });

              case 3:
                response = _context7.sent;
                delegateCount = response.data.totalCount;

                // Last Block (from last 100 Blocks)

                _context7.next = 7;
                return _block2.default.latest(100);

              case 7:
                blocks = _context7.sent;
                lastBlocksFetched = JSON.parse(sessionStorage.getItem('lastBlocksFetched') || '[]');

                sessionStorage.setItem('lastBlocksFetched', (0, _stringify2.default)(blocks));

                delegates = response.data.delegates.map(function (delegate) {
                  var lastBlock = blocks.find(function (b) {
                    return b.generatorPublicKey === delegate.publicKey;
                  });

                  if (lastBlock !== undefined && lastBlock.hasOwnProperty('timestamp')) {
                    delegate.blocks = [lastBlock];
                    delegate.blocksAt = lastBlock.timestamp;
                  }

                  return delegate;
                });

                // Last Block (from specific delegate)

                requests = [];
                lastDelegatesLastBlock = JSON.parse(sessionStorage.getItem('lastDelegatesLastBlock') || '[]');


                delegates.forEach(function (delegate) {
                  if (delegate.blocksAt) {
                    // we already have the delegate's last block from looking at the last 100 blocks
                    requests.push(delegate.blocks[0]);
                  } else if (lastBlocksFetched.length && lastBlocksFetched[0].height >= blocks[blocks.length - 1].height) {
                    // the delegate's last block is not in the last 100 blocks but we might have saved it in sessionStorage
                    // only valid if there is no 'hole' between the last blocks fetched and the current ones
                    var lastDel = lastDelegatesLastBlock.find(function (del) {
                      return del.publicKey === delegate.publicKey;
                    });
                    if (lastDel) {
                      requests.push(lastDel.blocks[0]);
                    } else {
                      requests.push(_block2.default.lastBlockByPublicKey(delegate.publicKey));
                    }
                  } else {
                    // last option : make a specific server request to get the delegate's last block
                    requests.push(_block2.default.lastBlockByPublicKey(delegate.publicKey));
                  }
                });

                _context7.next = 16;
                return _promise2.default.all(requests);

              case 16:
                results = _context7.sent;
                delegatesLastBlock = delegates.map(function (result, index) {
                  var lastBlock = results[index];

                  result.blocks = [lastBlock];
                  result.blocksAt = lastBlock ? lastBlock.timestamp : false;

                  return result;
                });

                sessionStorage.setItem('lastDelegatesLastBlock', (0, _stringify2.default)(delegatesLastBlock));

                // Rounds
                _context7.next = 21;
                return this.nextForgers();

              case 21:
                nextForgers = _context7.sent;
                delegatesRounds = delegatesLastBlock.map(function (delegate) {
                  var delegateIndex = nextForgers.findIndex(function (d) {
                    return d === delegate.publicKey;
                  });

                  delegate.forgingTime = delegateIndex * 8;
                  delegate.isRoundDelegate = delegateIndex !== -1;

                  return delegate;
                });

                // Forging Status

                _context7.next = 25;
                return _block2.default.height();

              case 25:
                height = _context7.sent;
                return _context7.abrupt('return', { delegateCount: delegateCount,
                  delegates: delegatesRounds.map(function (delegate) {
                    delegate.forgingStatus = _forging2.default.status(delegate, height);

                    return delegate;
                  }) });

              case 27:
              case 'end':
                return _context7.stop();
            }
          }
        }, _callee7, this);
      }));

      function activeDelegates() {
        return _ref7.apply(this, arguments);
      }

      return activeDelegates;
    }()
  }, {
    key: 'forged',
    value: function () {
      var _ref8 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee8() {
        var activeDelegates, response, delegates, requests, results;
        return _regenerator2.default.wrap(function _callee8$(_context8) {
          while (1) {
            switch (_context8.prev = _context8.next) {
              case 0:
                activeDelegates = _store2.default.getters['network/activeDelegates'];
                _context8.next = 3;
                return _node2.default.get('delegates', {
                  params: {
                    orderBy: 'rate:asc',
                    limit: activeDelegates
                  }
                });

              case 3:
                response = _context8.sent;
                delegates = response.data.delegates;
                requests = [];


                delegates.forEach(function (delegate) {
                  requests.push(_node2.default.get('delegates/forging/getForgedByAccount', {
                    params: {
                      generatorPublicKey: delegate.publicKey
                    }
                  }));
                });

                _context8.next = 9;
                return _promise2.default.all(requests);

              case 9:
                results = _context8.sent;
                return _context8.abrupt('return', results.map(function (result, index) {
                  return {
                    delegate: delegates[index].publicKey,
                    forged: Number(result.data.forged)
                  };
                }));

              case 11:
              case 'end':
                return _context8.stop();
            }
          }
        }, _callee8, this);
      }));

      function forged() {
        return _ref8.apply(this, arguments);
      }

      return forged;
    }()
  }, {
    key: 'activeDelegatesCount',
    value: function () {
      var _ref9 = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee9() {
        var response;
        return _regenerator2.default.wrap(function _callee9$(_context9) {
          while (1) {
            switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return _node2.default.get('delegates', {
                  params: {
                    orderBy: 'rate:asc',
                    limit: 1
                  }
                });

              case 2:
                response = _context9.sent;
                return _context9.abrupt('return', response.data.totalCount);

              case 4:
              case 'end':
                return _context9.stop();
            }
          }
        }, _callee9, this);
      }));

      function activeDelegatesCount() {
        return _ref9.apply(this, arguments);
      }

      return activeDelegatesCount;
    }()
  }]);
  return DelegateService;
}();

exports.default = new DelegateService();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,