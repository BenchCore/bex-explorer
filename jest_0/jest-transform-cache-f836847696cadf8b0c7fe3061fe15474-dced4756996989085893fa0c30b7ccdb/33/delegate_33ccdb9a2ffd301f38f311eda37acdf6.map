{"version":3,"sources":["delegate.js"],"names":["DelegateService","activeDelegates","store","getters","NodeService","get","params","limit","response","requests","push","index","Math","ceil","data","totalCount","offset","all","results","map","result","delegates","reduce","a","b","publicKey","excludeLowBalances","voters","_","orderBy","accounts","account","balance","Number","filter","pow","username","delegate","forgeResponse","forged","delegateCount","block","latest","blocks","lastBlocksFetched","JSON","parse","sessionStorage","getItem","setItem","lastBlock","find","generatorPublicKey","undefined","hasOwnProperty","blocksAt","timestamp","lastDelegatesLastBlock","forEach","length","height","lastDel","del","lastBlockByPublicKey","delegatesLastBlock","nextForgers","delegatesRounds","delegateIndex","findIndex","d","forgingTime","isRoundDelegate","forgingStatus","forging","status"],"mappings":"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","file":"delegate.js","sourcesContent":["import NodeService from '@/services/node'\nimport block from '@/services/block'\nimport forging from '@/services/forging'\nimport store from '@/store'\nimport _ from 'lodash'\n\nclass DelegateService {\n  async all() {\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    const response = await NodeService.get('delegates', {\n      params: {\n        limit: activeDelegates\n      }\n    })\n\n    const requests = []\n    requests.push(response)\n\n    for (\n      let index = 1;\n      index < Math.ceil(response.data.totalCount / activeDelegates);\n      index++\n    ) {\n      requests.push(\n        NodeService.get('delegates', {\n          params: {\n            limit: activeDelegates,\n            offset: index * activeDelegates\n          }\n        })\n      )\n    }\n\n    const results = await Promise.all(requests)\n\n    return results\n      .map(result => {\n        return result.data.delegates\n      })\n      .reduce((a, b) => [...a, ...b])\n  }\n\n  async voters(publicKey, excludeLowBalances = true) {\n    const response = await NodeService.get('delegates/voters', {\n      params: {publicKey}\n    })\n\n    let voters = _.orderBy(\n      response.data.accounts.map(account => {\n        account.balance = Number(account.balance)\n\n        return account\n      }),\n      'balance',\n      'desc'\n    )\n\n    if (excludeLowBalances) {\n      voters = _.filter(voters, account => {\n        return account.balance > 0.1 * Math.pow(10, 8)\n      })\n    }\n\n    return voters\n  }\n\n  async findByUsername(username) {\n    const response = await NodeService.get('delegates/get', {\n      params: {username}\n    })\n    return response.data.delegate\n  }\n\n  async find(publicKey) {\n    const response = await NodeService.get('delegates/get', {\n      params: {publicKey}\n    })\n\n    const delegate = response.data.delegate\n\n    if (!delegate) {\n      return false\n    }\n\n    const forgeResponse = await NodeService.get(\n      `delegates/forging/getForgedByAccount?generatorPublicKey=${\n        delegate.publicKey\n      }`\n    )\n\n    delegate.forged = Number(forgeResponse.data.forged)\n\n    return delegate\n  }\n\n  async standby() {\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    const response = await NodeService.get('delegates', {params: {offset: activeDelegates}})\n    return response.data.delegates\n  }\n\n  async nextForgers() {\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    const response = await NodeService.get('delegates/getNextForgers', {\n      params: {limit: activeDelegates}\n    })\n    return response.data.delegates\n  }\n\n  /**\n   * @TODO - Remove this when Core 2.0 is released.\n   */\n  async activeDelegates() {\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    const response = await NodeService.get('delegates', {\n      params: {\n        orderBy: 'rate:asc',\n        limit: activeDelegates\n      }\n    })\n    const delegateCount = response.data.totalCount\n\n    // Last Block (from last 100 Blocks)\n    const blocks = await block.latest(100)\n    const lastBlocksFetched = JSON.parse(sessionStorage.getItem('lastBlocksFetched') || '[]')\n    sessionStorage.setItem('lastBlocksFetched', JSON.stringify(blocks))\n\n    const delegates = response.data.delegates.map(delegate => {\n      const lastBlock = blocks.find(\n        b => b.generatorPublicKey === delegate.publicKey\n      )\n\n      if (lastBlock !== undefined && lastBlock.hasOwnProperty('timestamp')) {\n        delegate.blocks = [lastBlock]\n        delegate.blocksAt = lastBlock.timestamp\n      }\n\n      return delegate\n    })\n\n    // Last Block (from specific delegate)\n    const requests = []\n    const lastDelegatesLastBlock = JSON.parse(sessionStorage.getItem('lastDelegatesLastBlock') || '[]')\n\n    delegates.forEach((delegate) => {\n      if (delegate.blocksAt) {\n        // we already have the delegate's last block from looking at the last 100 blocks\n        requests.push(delegate.blocks[0])\n      } else if (lastBlocksFetched.length && lastBlocksFetched[0].height >= blocks[blocks.length - 1].height) {\n        // the delegate's last block is not in the last 100 blocks but we might have saved it in sessionStorage\n        // only valid if there is no 'hole' between the last blocks fetched and the current ones\n        const lastDel = lastDelegatesLastBlock.find(del => del.publicKey === delegate.publicKey)\n        if (lastDel) { requests.push(lastDel.blocks[0]) } else { requests.push(block.lastBlockByPublicKey(delegate.publicKey)) }\n      } else {\n        // last option : make a specific server request to get the delegate's last block\n        requests.push(block.lastBlockByPublicKey(delegate.publicKey))\n      }\n    })\n\n    const results = await Promise.all(requests)\n    const delegatesLastBlock = delegates.map((result, index) => {\n      let lastBlock = results[index]\n\n      result.blocks = [lastBlock]\n      result.blocksAt = lastBlock ? lastBlock.timestamp : false\n\n      return result\n    })\n    sessionStorage.setItem('lastDelegatesLastBlock', JSON.stringify(delegatesLastBlock))\n\n    // Rounds\n    const nextForgers = await this.nextForgers()\n    const delegatesRounds = delegatesLastBlock.map(delegate => {\n      const delegateIndex = nextForgers.findIndex(\n        d => d === delegate.publicKey\n      )\n\n      delegate.forgingTime = delegateIndex * 8\n      delegate.isRoundDelegate = delegateIndex !== -1\n\n      return delegate\n    })\n\n    // Forging Status\n    const height = await block.height()\n    return { delegateCount: delegateCount,\n      delegates: delegatesRounds.map(delegate => {\n        delegate.forgingStatus = forging.status(\n          delegate,\n          height\n        )\n\n        return delegate\n      }) }\n  }\n\n  async forged() {\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    const response = await NodeService.get('delegates', {\n      params: {\n        orderBy: 'rate:asc',\n        limit: activeDelegates\n      }\n    })\n\n    const delegates = response.data.delegates\n    const requests = []\n\n    delegates.forEach(delegate => {\n      requests.push(\n        NodeService.get('delegates/forging/getForgedByAccount', {\n          params: {\n            generatorPublicKey: delegate.publicKey\n          }\n        })\n      )\n    })\n\n    const results = await Promise.all(requests)\n    return results.map((result, index) => {\n      return {\n        delegate: delegates[index].publicKey,\n        forged: Number(result.data.forged)\n      }\n    })\n  }\n\n  async activeDelegatesCount() {\n    const response = await NodeService.get('delegates', {\n      params: {\n        orderBy: 'rate:asc',\n        limit: 1\n      }\n    })\n    return response.data.totalCount\n  }\n}\n\nexport default new DelegateService()\n"]}