{"version":3,"sources":["Transactions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAgBA;;;;AACA;;;;;;AAjBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAAA;AACA;AACA;AAFA;AAAA;;AAKA;AAAA;;AACA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAEA;AAFA;AAAA;;AAAA;AAGA;;AACA;AAAA;AAAA;AAJA;AAAA;;AAAA;AAAA;AAAA;AAKA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;AADA;AAAA;AAAA;;AAAA;AAIA;AAJA;AAAA;;AAAA;AAKA;;AACA;AACA;AAPA;AAAA;;AAAA;AAAA;AAAA;AAQA;AARA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;;AAYA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AADA;AAAA;;AAAA;AAEA;;AACA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;AADA;AAAA;;AAAA;AAEA;;AACA;;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AAFA;AAQA;AArCA;AA1CA","sourcesContent":["<template>\n  <div class=\"max-w-2xl mx-auto pt-5\">\n    <content-header>{{ $t(\"Transactions\") }} - {{ $t(capitalize(type)) }}</content-header>\n    <section class=\"page-section py-10\">\n      <div class=\"hidden sm:block\">\n        <table-transactions :transactions=\"transactions\"></table-transactions>\n      </div>\n      <div class=\"sm:hidden\">\n        <table-transactions-mobile :transactions=\"transactions\"></table-transactions-mobile>\n      </div>\n      <paginator v-if=\"transactions\" :start=\"+this.page\" :count=\"totalTransactions\"></paginator>\n    </section>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport WalletService from '@/services/wallet'\nimport TransactionService from '@/services/transaction'\n\nexport default {\n  data: () => ({\n    totalTransactions: 0,\n    transactions: null\n  }),\n\n  created() {\n    this.$on('paginatorChanged', page => this.changePage(page))\n    this.getTotalTransactions()\n  },\n\n  async beforeRouteEnter (to, from, next) {\n    try {\n      const wallet = await WalletService.find(to.params.address)\n      const transactions = await TransactionService[`${to.params.type}ByAddress`](wallet.address, to.params.page)\n      next(vm => vm.setTransactions(transactions))\n    } catch(e) { next({ name: '404' }) }\n  },\n\n  async beforeRouteUpdate (to, from, next) {\n    this.transactions = null\n\n    try {\n      const wallet = await WalletService.find(to.params.address)\n      const transactions = await TransactionService[`${to.params.type}ByAddress`](wallet.address, to.params.page)\n      this.setTransactions(transactions)\n      next()\n    } catch(e) { next({ name: '404' }) }\n  },\n\n  computed: {\n    address() {\n      return this.$route.params.address\n    },\n    type() {\n      return this.$route.params.type\n    },\n    page() {\n      return this.$route.params.page\n    },\n  },\n\n  methods: {\n    setTransactions (transactions) {\n      if (!transactions) return\n\n      this.transactions = transactions\n    },\n\n    getTotalTransactions() {\n      if (this.type === 'sent' || this.type === 'all') {\n        this.getSentCount()\n      }\n      if (this.type === 'received' || this.type === 'all') {\n        this.getReceivedCount()\n      }\n    },\n\n    async getSentCount() {\n      const wallet = await WalletService.find(this.address)\n      const response = await TransactionService.sentByAddressCount(wallet.address)\n      this.totalTransactions += Number(response)\n    },\n\n    async getReceivedCount() {\n      const wallet = await WalletService.find(this.address)\n      const received = await TransactionService.receivedByAddressCount(wallet.address)\n      this.totalTransactions += Number(received)\n    },\n\n    changePage(page) {\n      this.$router.push({\n        name: 'wallet-transactions',\n        params: {\n          address: this.address,\n          type: this.type,\n          page,\n        }\n      })\n    }\n  }\n}\n</script>\n"]}