{"version":3,"sources":["Wallets.vue"],"names":[],"mappings":";;;;;;;;;;;AAkCA;;;;;AAGA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AALA;;AAWA;;AAIA;AACA;AACA;;AAEA;AACA;AALA;AAhBA;AAnCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["<template>\n  <loader :data=\"wallets\">\n    <table-component v-if=\"wallets && wallets.length > 0\" :data=\"wallets\" :show-filter=\"false\" :show-caption=\"false\" table-class=\"w-full\">\n      <table-column show=\"vueTableComponentInternalRowId\" :label=\"$t('Rank')\" header-class=\"left-header-start-cell w-32\" cell-class=\"left-start-cell\">\n        <template slot-scope=\"row\">\n          {{ getRank(row.vueTableComponentInternalRowId) }}\n        </template>\n      </table-column>\n\n      <table-column show=\"address\" :label=\"$t('Address')\" header-class=\"left-header-cell\" cell-class=\"left-cell\">\n        <template slot-scope=\"row\">\n          <link-wallet :address=\"row.address\" :trunc=\"false\"></link-wallet>\n        </template>\n      </table-column>\n\n      <table-column show=\"balance\" :label=\"$t('Balance')\" header-class=\"right-header-cell\" cell-class=\"right-cell\">\n        <template slot-scope=\"row\">\n          {{ readableCrypto(row.balance) }}\n        </template>\n      </table-column>\n\n      <table-column :sortable=\"false\" show=\"supply\" :label=\"$t('Supply')\" header-class=\"right-header-end-cell\" cell-class=\"right-end-cell w-24\">\n        <template slot-scope=\"row\">\n          {{ readableNumber((row.balance / total) * 100) }}%\n        </template>\n      </table-column>\n    </table-component>\n    <div v-else class=\"px-5 md:px-10\">\n      <span>{{ $t(\"No Results\") }}</span>\n    </div>\n  </loader>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport { mapGetters } from 'vuex'\n\nexport default {\n  props: {\n    wallets: {\n      // type: Array or null\n      required: true\n    },\n    total: {\n      type: Number,\n      required: true\n    }\n  },\n\n  computed: {\n    ...mapGetters('network', ['supply'])\n  },\n\n  methods: {\n    getRank(index) {\n      const page = this.$route.params.page > 1 ? this.$route.params.page - 1 : 0\n\n      return page * 25 + (index + 1)\n    }\n  }\n}\n</script>\n"]}