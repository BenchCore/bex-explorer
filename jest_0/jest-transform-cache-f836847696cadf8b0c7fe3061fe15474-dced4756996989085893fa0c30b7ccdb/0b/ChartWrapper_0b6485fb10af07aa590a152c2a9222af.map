{"version":3,"sources":["ChartWrapper.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAkBA;;;;AACA;;;;AACA;;AACA;;;;;;AArBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAQA;;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;AACA;AACA;AAJA;AADA;AAQA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAZA;AAcA;AACA;AADA;AAfA;AAoBA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAFA;AAbA;AAvBA;AA2CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AACA;AAZA;AAfA;AA1DA;AAHA;AAAA;;AA8FA;;AAIA;AACA;AACA;;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AAEA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAhBA;AAFA;;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAuBA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AA7CA;AAzGA","sourcesContent":["<template>\n  <div>\n    <div class=\"flex justify-between items-center px-10 py-8\">\n      <h2 class=\"text-white m-0 text-xl font-normal\">{{ $t(\"Price in\") }} {{ currencyName }}</h2>\n      <div>\n        <button @click=\"period('day')\"  :class=\"{ 'chart-tab-active': type === 'day' }\" class=\"chart-tab\">{{ $t(\"Day\") }}</button>\n        <button @click=\"period('week')\"  :class=\"{ 'chart-tab-active': type === 'week' }\" class=\"chart-tab\">{{ $t(\"Week\") }}</button>\n        <button @click=\"period('month')\"  :class=\"{ 'chart-tab-active': type === 'month' }\" class=\"chart-tab\">{{ $t(\"Month\") }}</button>\n        <button @click=\"period('quarter')\"  :class=\"{ 'chart-tab-active': type === 'quarter' }\" class=\"chart-tab\">{{ $t(\"Quarter\") }}</button>\n        <button @click=\"period('year')\"  :class=\"{ 'chart-tab-active': type === 'year' }\" class=\"chart-tab\">{{ $t(\"Year\") }}</button>\n      </div>\n    </div>\n\n    <price-chart :chartData=\"chartData\" :options=\"options\" :height=\"314\"></price-chart>\n  </div>\n</template>\n\n<script type=\"text/ecmascript-6\">\nimport CryptoCompareService from '@/services/crypto-compare'\nimport PriceChart from '@/components/charts/price-chart'\nimport { mapGetters } from 'vuex'\nimport store from '@/store'\n\nexport default {\n  components: {PriceChart},\n\n  data: () => ({\n    type: 'day',\n    chartData: {},\n    options: {\n      showScale: true,\n      responsive: true,\n      maintainAspectRatio: false,\n      legend: {\n        display: false,\n      },\n      layout: {\n        padding: {\n          left: 50,\n          right: 50,\n          top: 0,\n          bottom: 50,\n        }\n      },\n      scales: {\n        yAxes: [\n          {\n            ticks: {\n              callback: (value, index, values) => {\n                // Skip every second tick\n                if (index % 2 === 0) return\n\n                if ([store.getters['network/token'], 'BTC', 'ETH', 'LTC'].some(c => store.getters['currency/name'].indexOf(c) > -1)) {\n                  return store.getters['currency/symbol'] + value.toFixed(8)\n                }\n\n                return store.getters['currency/symbol'] + value.toFixed(2)\n              },\n              fontColor: '#838a9b',\n              fontSize: 13,\n            },\n            gridLines: {\n              color: '#282b38',\n            },\n          },\n        ],\n        xAxes: [\n          {\n            // type: 'time',\n            // time: {\n            //   unit: 'day',\n            //   unitStepSize: 1,\n            //   displayFormats: {\n            //     day: 'MMM D',\n            //   },\n            // },\n            gridLines: {\n              display: true,\n              color: '#282b38',\n            },\n            ticks: {\n              fontColor: '#838a9b',\n              fontSize: 13,\n            },\n          },\n        ],\n      },\n      tooltips: {\n        backgroundColor: '#272936',\n        titleFontStyle: 'normal',\n        titleFontSize: 18,\n        bodyFontFamily: \"'Proxima Nova', sans-serif\",\n        cornerRadius: 3,\n        bodyFontColor: '#838a9b',\n        bodyFontSize: 14,\n        xPadding: 14,\n        yPadding: 14,\n        displayColors: false,\n        mode: 'index',\n        intersect: false,\n        // borderWidth: 1,\n        // borderColor: '#037cff',\n        callbacks: {\n          title: tooltipItem => {\n            const name = store.getters['currency/name']\n            const token = store.getters['currency/symbol']\n\n            if ([token, 'BTC', 'ETH', 'LTC'].some(c => name.indexOf(c) > -1)) {\n              return `${name} ${Number(tooltipItem[0].yLabel).toFixed(8)}`\n            }\n\n            return `${name} ${Number(tooltipItem[0].yLabel).toFixed(2)}`\n          },\n          label: tooltipItem => ''\n          // label: tooltipItem => `BTC ${tooltipItem.yLabel}`\n        }\n      }\n    }\n  }),\n\n  computed: {\n    ...mapGetters('currency', { currencyName: 'name' }),\n  },\n\n  mounted() {\n    this.prepareComponent()\n  },\n\n  methods: {\n    prepareComponent() {\n      this.renderChart()\n\n      this.watchCurrencyName()\n      this.watchNetworkToken()\n    },\n\n    period(type) {\n      this.type = type\n\n      this.renderChart()\n    },\n\n    async renderChart(type) {\n      const response = await CryptoCompareService[this.type]()\n      this.chartData = {\n        labels: response.labels,\n        datasets: [{\n          type: 'line',\n          pointHoverBackgroundColor: '#fff',\n          borderColor: '#535972',\n          pointHoverBorderColor: '#037cff',\n          pointBackgroundColor: 'rgba(0,0,0,0)',\n          pointBorderColor: 'rgba(0,0,0,0)',\n          pointHoverRadius: 5,\n          pointHoverBorderWidth: 4,\n          fill: false,\n          // data: this.chartData.map((point, index) => {\n          //   return {\n          //     t: this.labels[index],\n          //     y: point,\n          //   }\n          // }),\n          data: response.datasets\n        }],\n      }\n    },\n\n    watchCurrencyName() {\n      this.$store.watch((state) => state.currency.name, (value) => this.renderChart())\n    },\n\n    watchNetworkToken() {\n      this.$store.watch((state) => state.network.token, (value) => this.renderChart())\n    },\n  }\n}\n</script>\n"]}