{"version":3,"sources":["forging.js"],"names":["ForgeStatus","FORGING","MISSING","NOT_FORGING","AWAITING_SLOT","MISSED_AWAITING_SLOT","AWAITING_STATUS","ForgingService","delegate","height","status","updatedAt","blocksAt","blocks","length","lastBlock","blockAt","epochStamp","timestamp","networkRound","round","delegateRound","awaitingSlot","code","isRoundDelegate","missedblocks","rate","join","d","Date","UTC","isNaN","activeDelegates","store","getters","Math","floor","delegates","forging","missedBlock","notForging","unprocessed","forEach","element","forgingStatus"],"mappings":"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","file":"forging.js","sourcesContent":["import store from '@/store'\n\nconst ForgeStatus = Object.freeze({\n  FORGING: 0,\n  MISSING: 1,\n  NOT_FORGING: 2,\n  AWAITING_SLOT: 3,\n  MISSED_AWAITING_SLOT: 4,\n  AWAITING_STATUS: 5\n})\n\n/**\n * @TODO - Remove this when Core 2.0 is released.\n */\nclass ForgingService {\n  status(delegate, height) {\n    const status = {\n      updatedAt: delegate.blocksAt\n    }\n\n    if (delegate.blocksAt && delegate.blocks.length > 0) {\n      status.lastBlock = delegate.blocks[0]\n      status.blockAt = this.epochStamp(status.lastBlock.timestamp)\n      status.networkRound = this.round(height)\n      status.delegateRound = this.round(status.lastBlock.height)\n      status.awaitingSlot = status.networkRound - status.delegateRound\n    } else {\n      status.lastBlock = null\n    }\n\n    if (status.awaitingSlot === ForgeStatus.FORGING) {\n      // Forged block in current round\n      status.code = ForgeStatus.FORGING\n    } else if (!delegate.isRoundDelegate && status.awaitingSlot === ForgeStatus.MISSING) {\n      // Missed block in current round\n      status.code = ForgeStatus.MISSING\n    } else if (!delegate.isRoundDelegate && status.awaitingSlot > ForgeStatus.MISSING) {\n      // Missed block in current and last round = not forging\n      status.code = ForgeStatus.NOT_FORGING\n    } else if (status.awaitingSlot === ForgeStatus.MISSING) {\n      // Awaiting slot, but forged in last round\n      status.code = ForgeStatus.AWAITING_SLOT\n    } else if (status.awaitingSlot === ForgeStatus.NOT_FORGING) {\n      // Awaiting slot, but missed block in last round\n      status.code = ForgeStatus.MISSED_AWAITING_SLOT\n    } else if (!status.blockAt && !status.updatedAt) {\n      // Awaiting status or unprocessed\n      status.code = ForgeStatus.AWAITING_STATUS\n      // For delegates which not forged a single block yet (statuses FORGING, AWAITING_SLOT, AWAITING_STATUS not apply here)\n    } else if (!status.blockAt && status.updatedAt) {\n      if (!delegate.isRoundDelegate && delegate.missedblocks === ForgeStatus.MISSING) {\n        // Missed block in current round\n        status.code = ForgeStatus.MISSING\n      } else if (delegate.missedblocks > 1) {\n        // Missed more than 1 block = not forging\n        status.code = ForgeStatus.NOT_FORGING\n      } else if (delegate.missedblocks === ForgeStatus.MISSING) {\n        // Missed block in previous round\n        status.code = ForgeStatus.MISSED_AWAITING_SLOT\n      }\n    } else {\n      // Not Forging\n      status.code = ForgeStatus.NOT_FORGING\n    }\n\n    delegate.status = [status.code, delegate.rate].join(':')\n\n    return status\n  }\n\n  epochStamp(d) {\n    return new Date((((Date.UTC(2017, 2, 21, 13, 0, 0, 0) / 1000) + d) * 1000))\n  }\n\n  round(height) {\n    if (isNaN(height)) return 0\n\n    const activeDelegates = store.getters['network/activeDelegates']\n\n    return Math.floor(height / activeDelegates) + (height % activeDelegates > 0 ? 1 : 0)\n  }\n\n  totals(delegates) {\n    let forging = 0\n    let missedBlock = 0\n    let notForging = 0\n    let awaitingSlot = 0\n    let unprocessed = 0\n\n    delegates.forEach(element => {\n      switch (element.forgingStatus.code) {\n        case ForgeStatus.FORGING:\n        case ForgeStatus.AWAITING_SLOT:\n        {\n          forging++\n          break\n        }\n        case ForgeStatus.MISSING:\n        case ForgeStatus.MISSED_AWAITING_SLOT:\n        {\n          missedBlock++\n          break\n        }\n        case ForgeStatus.NOT_FORGING:\n        case ForgeStatus.AWAITING_STATUS:\n        {\n          notForging++\n          break\n        }\n        default:\n        {\n          unprocessed++\n          break\n        }\n      }\n    })\n\n    delegates.forEach(element => {\n      switch (element.forgingStatus.code) {\n        case ForgeStatus.AWAITING_SLOT:\n        case ForgeStatus.MISSED_AWAITING_SLOT:\n        {\n          awaitingSlot++\n          break\n        }\n        default:\n        {\n          break\n        }\n      }\n    })\n\n    return {\n      forging,\n      missedBlock,\n      notForging,\n      awaitingSlot,\n      unprocessed\n    }\n  }\n}\n\nexport default new ForgingService()\n"]}