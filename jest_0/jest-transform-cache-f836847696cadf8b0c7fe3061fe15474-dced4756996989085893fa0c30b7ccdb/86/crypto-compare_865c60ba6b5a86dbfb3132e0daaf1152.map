{"version":3,"sources":["crypto-compare.js"],"names":["CryptoCompareService","sendRequest","type","limit","dateTimeFormat","date","Math","round","Date","getTime","targetCurrency","store","getters","axios","get","params","fsym","tsym","toTs","response","transform","data","Data","labels","map","moment","unix","value","time","format","datasets","close"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;IAEMA,oB;;;;;;;;;;;;;iDAEK,KAAKC,WAAL,CAAiB,MAAjB,EAAyB,EAAzB,EAA6B,OAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;kDAIA,KAAKA,WAAL,CAAiB,KAAjB,EAAwB,CAAxB,EAA2B,OAA3B,C;;;;;;;;;;;;;;;;;;;;;;;;kDAIA,KAAKA,WAAL,CAAiB,KAAjB,EAAwB,EAAxB,EAA4B,OAA5B,C;;;;;;;;;;;;;;;;;;;;;;;;kDAIA,KAAKA,WAAL,CAAiB,KAAjB,EAAwB,GAAxB,EAA6B,OAA7B,C;;;;;;;;;;;;;;;;;;;;;;;;kDAIA,KAAKA,WAAL,CAAiB,KAAjB,EAAwB,GAAxB,EAA6B,OAA7B,C;;;;;;;;;;;;;;;;;;;6GAGSC,I,EAAMC,K,EAAOC,c;;;;;;AACvBC,oB,GAAOC,KAAKC,KAAL,CAAW,IAAIC,IAAJ,GAAWC,OAAX,KAAuB,IAAlC,C;AAETC,8B,GAAiB,K;;AACrB,oBAAIC,gBAAMC,OAAN,CAAc,eAAd,MAAmCD,gBAAMC,OAAN,CAAc,eAAd,CAAvC,EAAuE;AACrEF,mCAAiBC,gBAAMC,OAAN,CAAc,eAAd,CAAjB;AACD;;;uBAEsBC,gBACpBC,GADoB,kDAC+BZ,IAD/B,EACuC;AAC1Da,0BAAQ;AACNC,0BAAML,gBAAMC,OAAN,CAAc,eAAd,CADA;AAENK,0BAAMP,cAFA;AAGNQ,0BAAMb,IAHA;AAINF;AAJM;AADkD,iBADvC,C;;;AAAjBgB,wB;kDASC,KAAKC,SAAL,CAAeD,SAASE,IAAT,CAAcC,IAA7B,EAAmClB,cAAnC,C;;;;;;;;;;;;;;;;;;8BAGCe,Q,EAAUf,c,EAAgB;AAClC,aAAO;AACLmB,gBAAQJ,SAASK,GAAT,CAAa,iBAAS;AAC5B,iBAAOC,iBAAOC,IAAP,CAAYC,MAAMC,IAAlB,EAAwBC,MAAxB,CAA+BzB,cAA/B,CAAP;AACD,SAFO,CADH;AAIL0B,kBAAUX,SAASK,GAAT,CAAa,iBAAS;AAC9B,iBAAOG,MAAMI,KAAb;AACD,SAFS;AAJL,OAAP;AAQD;;;;;kBAGY,IAAI/B,oBAAJ,E","file":"crypto-compare.js","sourcesContent":["import axios from 'axios'\nimport moment from 'moment'\nimport store from '@/store'\n\nclass CryptoCompareService {\n  async day() {\n    return this.sendRequest('hour', 24, 'HH:mm')\n  }\n\n  async week() {\n    return this.sendRequest('day', 7, 'DD.MM')\n  }\n\n  async month() {\n    return this.sendRequest('day', 30, 'DD.MM')\n  }\n\n  async quarter() {\n    return this.sendRequest('day', 120, 'DD.MM')\n  }\n\n  async year() {\n    return this.sendRequest('day', 365, 'DD.MM')\n  }\n\n  async sendRequest(type, limit, dateTimeFormat) {\n    const date = Math.round(new Date().getTime() / 1000)\n\n    let targetCurrency = 'USD'\n    if (store.getters['currency/name'] !== store.getters['network/token']) {\n      targetCurrency = store.getters['currency/name']\n    }\n\n    const response = await axios\n      .get(`https://min-api.cryptocompare.com/data/histo${type}`, {\n        params: {\n          fsym: store.getters['network/token'],\n          tsym: targetCurrency,\n          toTs: date,\n          limit\n        }\n      })\n    return this.transform(response.data.Data, dateTimeFormat)\n  }\n\n  transform(response, dateTimeFormat) {\n    return {\n      labels: response.map(value => {\n        return moment.unix(value.time).format(dateTimeFormat)\n      }),\n      datasets: response.map(value => {\n        return value.close\n      })\n    }\n  }\n}\n\nexport default new CryptoCompareService()\n"]}