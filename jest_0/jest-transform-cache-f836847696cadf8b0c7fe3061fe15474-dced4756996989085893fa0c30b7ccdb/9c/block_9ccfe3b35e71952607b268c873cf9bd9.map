{"version":3,"sources":["block.js"],"names":["BlockService","limit","NodeService","get","params","orderBy","response","data","blocks","height","supply","id","block","page","offset","generatorPublicKey","count","publicKey"],"mappings":"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","file":"block.js","sourcesContent":["import NodeService from '@/services/node'\n\nclass BlockService {\n  async latest(limit = 25) {\n    const response = await NodeService.get('blocks', {\n      params: {\n        orderBy: 'height:desc',\n        limit\n      }\n    })\n    return response.data.blocks\n  }\n\n  async last() {\n    const response = await NodeService.get('blocks', {\n      params: {\n        orderBy: 'height:desc',\n        limit: 1\n      }\n    })\n    return response.data.blocks[0]\n  }\n\n  async height() {\n    const response = await NodeService.get('blocks/getHeight')\n    return response.data.height\n  }\n\n  async supply() {\n    const response = await NodeService.get('blocks/getSupply')\n    return response.data.supply\n  }\n\n  async find(id) {\n    const response = await NodeService.get('blocks/get', {\n      params: {\n        id\n      }\n    })\n    return response.data.block\n  }\n\n  async paginate(page, limit = 25) {\n    const offset = page > 1 ? (page - 1) * limit : 0\n\n    const response = await NodeService.get('blocks', {\n      params: {\n        orderBy: 'height:desc',\n        limit,\n        offset\n      }\n    })\n    return response.data.blocks\n  }\n\n  async getByPublicKey(generatorPublicKey, page, limit = 25) {\n    const offset = page > 1 ? (page - 1) * limit : 0\n\n    const response = await NodeService.get('blocks', {\n      params: {\n        orderBy: 'height:desc',\n        limit,\n        offset,\n        generatorPublicKey\n      }\n    })\n    return response.data.blocks\n  }\n\n  async forgedByPublicKeyCount(generatorPublicKey) {\n    const response = await NodeService.get('blocks', {\n      params: {\n        generatorPublicKey,\n        limit: 1\n      }\n    })\n\n    // currently not supported by node\n    return response.data.count\n  }\n\n  async lastBlockByPublicKey(publicKey) {\n    const response = await NodeService.get('blocks', {\n      params: {\n        orderBy: 'height:desc',\n        limit: 1,\n        generatorPublicKey: publicKey\n      }\n    })\n    return response.data.blocks[0]\n  }\n\n  async findPrevious(height) {\n    const response = await NodeService.get('blocks', {\n      params: { height: height - 1 }\n    })\n    return response.data.blocks[0]\n  }\n\n  async findNext(height) {\n    const response = await NodeService.get('blocks', {\n      params: { height: height + 1 }\n    })\n    return response.data.blocks[0]\n  }\n}\n\nexport default new BlockService()\n"]}